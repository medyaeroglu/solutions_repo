{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 This project aims to explore the relationship between the range of a projectile and its angle of projection. Let's break it down into clear steps for both the theoretical and computational components, as well as the practical applications. 1. Theoretical Foundation 1.1. Governing Equations To derive the equations for projectile motion, we begin with Newton's second law in two dimensions, considering only the forces acting on the projectile (ignoring air resistance): The only force in the vertical direction is gravity, \\( F_y = -mg \\) , where \\( m \\) is the mass of the projectile and \\( g \\) is the acceleration due to gravity. In the horizontal direction, there is no force acting, so \\( F_x = 0 \\) . We break down the motion into two components: - Horizontal motion : The horizontal velocity remains constant throughout the flight since there is no horizontal acceleration. Thus: $$ x(t) = v_0 \\cos(\\theta) t $$ where \\( v_0 \\) is the initial velocity, \\( \\theta \\) is the angle of projection, and \\( t \\) is time. Vertical motion : The vertical motion follows the equations of uniformly accelerated motion due to gravity: $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ where \\( v_0 \\sin(\\theta) \\) is the initial vertical velocity. 1.2. Time of Flight To find the time it takes for the projectile to return to the ground, we set \\( y(t) = 0 \\) (i.e., when the projectile hits the ground). Solving the equation: $$ 0 = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ gives the nontrivial solution: $$ t = \\frac{2v_0 \\sin(\\theta)}{g} $$ This is the time of flight. 1.3. Horizontal Range The horizontal range \\( R \\) is the distance the projectile travels in the horizontal direction during its time of flight. Using the horizontal equation \\( x(t) = v_0 \\cos(\\theta) t \\) and substituting the time of flight: $$ R = v_0 \\cos(\\theta) \\left(\\frac{2v_0 \\sin(\\theta)}{g}\\right) $$ Simplifying: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation describes the range of the projectile as a function of the initial velocity, gravitational acceleration, and angle of projection. 1.4. Family of Solutions By varying the parameters\u2014initial velocity \\( v_0 \\) , gravitational acceleration \\( g \\) , and angle of projection \\( \\theta \\) \u2014we get a family of solutions for the range. For a fixed initial velocity, the range is maximized when \\( \\theta = 45^\\circ \\) , since \\( \\sin(2\\theta) \\) achieves its maximum value of 1 at this angle. 2. Analysis of the Range 2.1. Dependence on Angle of Projection The equation \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) reveals that the range depends on the angle of projection through the function \\( \\sin(2\\theta) \\) . This means: - The range increases as the angle increases from 0\u00b0 to 45\u00b0. - Beyond 45\u00b0, the range decreases symmetrically, as \\( \\sin(2\\theta) \\) is symmetric about 45\u00b0. 2.2. Influence of Initial Velocity and Gravitational Acceleration Initial velocity : The range increases quadratically with the initial velocity \\( v_0 \\) . Doubling the initial velocity will quadruple the range, as \\( R \\propto v_0^2 \\) . Gravitational acceleration : The range is inversely proportional to the gravitational acceleration \\( g \\) . A smaller gravitational acceleration (such as on the Moon) will result in a larger range. 3. Practical Applications 3.1. Real-World Modifications In real-world scenarios, air resistance, launch height, and terrain unevenness can significantly affect the trajectory: - Air resistance : The drag force reduces the range. This would require solving the equations of motion with additional drag terms. - Launch height : If the projectile is launched from an elevated position, the time of flight and range will both increase compared to a projectile launched from ground level. - Uneven terrain : If the projectile lands on a surface that is not flat, the range calculation would need to account for the landing angle and height differences. 3.2. Sports and Engineering Projectile motion is frequently analyzed in sports (e.g., basketball, soccer) to optimize the trajectory for maximum distance or accuracy. In engineering, understanding projectile motion is crucial for designing missile trajectories or analyzing the behavior of fireworks. 4. Implementation For the computational part, you can use Python with libraries such as matplotlib and numpy to simulate and visualize the projectile motion for different initial conditions. 4.1. Python Script to Simulate Projectile Motion import numpy as np import matplotlib.pyplot as plt def projectile_motion(v0, angle, g=9.81): # Convert angle to radians angle_rad = np.radians(angle) # Time of flight t_flight = 2 * v0 * np.sin(angle_rad) / g # Time intervals t = np.linspace(0, t_flight, num=500) # Position equations x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y, t_flight def range_of_projectile(v0, g=9.81): # Maximum range occurs at 45 degrees angle = 45 range = (v0**2 * np.sin(2 * np.radians(angle))) / g return range # Parameters v0 = 20 # initial velocity in m/s angles = np.arange(0, 91, 5) # angles from 0 to 90 degrees # Plot range vs angle ranges = [range_of_projectile(v0) for angle in angles] plt.plot(angles, ranges) plt.title('Range vs Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.show() 4.2. Explanation of the Code The projectile_motion function simulates the trajectory of the projectile for a given initial velocity and angle. The range_of_projectile function calculates the range using the theoretical formula \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) . We use matplotlib to visualize the range as a function of the launch angle. 5. Limitations and Future Improvements This idealized model assumes no air resistance and flat terrain. For more accurate predictions: - Air resistance : Implement drag force using the differential equation \\( m \\frac{d^2x}{dt^2} = -C_d A \\frac{1}{2} \\rho v^2 \\) , where \\( C_d \\) is the drag coefficient, \\( A \\) is the cross-sectional area, and \\( \\rho \\) is the air density. - Variable terrain : Simulate the effect of uneven terrain by introducing a height function for the ground. Deliverables: Python code for simulating projectile motion. Graph showing the range as a function of launch angle for various initial velocities. A discussion of real-world applications and suggestions for improving the model. This project provides a clear understanding of the physics of projectile motion and allows for practical simulation and analysis.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"This project aims to explore the relationship between the range of a projectile and its angle of projection. Let's break it down into clear steps for both the theoretical and computational components, as well as the practical applications.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-governing-equations","text":"To derive the equations for projectile motion, we begin with Newton's second law in two dimensions, considering only the forces acting on the projectile (ignoring air resistance): The only force in the vertical direction is gravity, \\( F_y = -mg \\) , where \\( m \\) is the mass of the projectile and \\( g \\) is the acceleration due to gravity. In the horizontal direction, there is no force acting, so \\( F_x = 0 \\) . We break down the motion into two components: - Horizontal motion : The horizontal velocity remains constant throughout the flight since there is no horizontal acceleration. Thus: $$ x(t) = v_0 \\cos(\\theta) t $$ where \\( v_0 \\) is the initial velocity, \\( \\theta \\) is the angle of projection, and \\( t \\) is time. Vertical motion : The vertical motion follows the equations of uniformly accelerated motion due to gravity: $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ where \\( v_0 \\sin(\\theta) \\) is the initial vertical velocity.","title":"1.1. Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-time-of-flight","text":"To find the time it takes for the projectile to return to the ground, we set \\( y(t) = 0 \\) (i.e., when the projectile hits the ground). Solving the equation: $$ 0 = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ gives the nontrivial solution: $$ t = \\frac{2v_0 \\sin(\\theta)}{g} $$ This is the time of flight.","title":"1.2. Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-horizontal-range","text":"The horizontal range \\( R \\) is the distance the projectile travels in the horizontal direction during its time of flight. Using the horizontal equation \\( x(t) = v_0 \\cos(\\theta) t \\) and substituting the time of flight: $$ R = v_0 \\cos(\\theta) \\left(\\frac{2v_0 \\sin(\\theta)}{g}\\right) $$ Simplifying: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation describes the range of the projectile as a function of the initial velocity, gravitational acceleration, and angle of projection.","title":"1.3. Horizontal Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#14-family-of-solutions","text":"By varying the parameters\u2014initial velocity \\( v_0 \\) , gravitational acceleration \\( g \\) , and angle of projection \\( \\theta \\) \u2014we get a family of solutions for the range. For a fixed initial velocity, the range is maximized when \\( \\theta = 45^\\circ \\) , since \\( \\sin(2\\theta) \\) achieves its maximum value of 1 at this angle.","title":"1.4. Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-dependence-on-angle-of-projection","text":"The equation \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) reveals that the range depends on the angle of projection through the function \\( \\sin(2\\theta) \\) . This means: - The range increases as the angle increases from 0\u00b0 to 45\u00b0. - Beyond 45\u00b0, the range decreases symmetrically, as \\( \\sin(2\\theta) \\) is symmetric about 45\u00b0.","title":"2.1. Dependence on Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-influence-of-initial-velocity-and-gravitational-acceleration","text":"Initial velocity : The range increases quadratically with the initial velocity \\( v_0 \\) . Doubling the initial velocity will quadruple the range, as \\( R \\propto v_0^2 \\) . Gravitational acceleration : The range is inversely proportional to the gravitational acceleration \\( g \\) . A smaller gravitational acceleration (such as on the Moon) will result in a larger range.","title":"2.2. Influence of Initial Velocity and Gravitational Acceleration"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-real-world-modifications","text":"In real-world scenarios, air resistance, launch height, and terrain unevenness can significantly affect the trajectory: - Air resistance : The drag force reduces the range. This would require solving the equations of motion with additional drag terms. - Launch height : If the projectile is launched from an elevated position, the time of flight and range will both increase compared to a projectile launched from ground level. - Uneven terrain : If the projectile lands on a surface that is not flat, the range calculation would need to account for the landing angle and height differences.","title":"3.1. Real-World Modifications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-sports-and-engineering","text":"Projectile motion is frequently analyzed in sports (e.g., basketball, soccer) to optimize the trajectory for maximum distance or accuracy. In engineering, understanding projectile motion is crucial for designing missile trajectories or analyzing the behavior of fireworks.","title":"3.2. Sports and Engineering"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"For the computational part, you can use Python with libraries such as matplotlib and numpy to simulate and visualize the projectile motion for different initial conditions.","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#41-python-script-to-simulate-projectile-motion","text":"import numpy as np import matplotlib.pyplot as plt def projectile_motion(v0, angle, g=9.81): # Convert angle to radians angle_rad = np.radians(angle) # Time of flight t_flight = 2 * v0 * np.sin(angle_rad) / g # Time intervals t = np.linspace(0, t_flight, num=500) # Position equations x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y, t_flight def range_of_projectile(v0, g=9.81): # Maximum range occurs at 45 degrees angle = 45 range = (v0**2 * np.sin(2 * np.radians(angle))) / g return range # Parameters v0 = 20 # initial velocity in m/s angles = np.arange(0, 91, 5) # angles from 0 to 90 degrees # Plot range vs angle ranges = [range_of_projectile(v0) for angle in angles] plt.plot(angles, ranges) plt.title('Range vs Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.show()","title":"4.1. Python Script to Simulate Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#42-explanation-of-the-code","text":"The projectile_motion function simulates the trajectory of the projectile for a given initial velocity and angle. The range_of_projectile function calculates the range using the theoretical formula \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) . We use matplotlib to visualize the range as a function of the launch angle.","title":"4.2. Explanation of the Code"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-and-future-improvements","text":"This idealized model assumes no air resistance and flat terrain. For more accurate predictions: - Air resistance : Implement drag force using the differential equation \\( m \\frac{d^2x}{dt^2} = -C_d A \\frac{1}{2} \\rho v^2 \\) , where \\( C_d \\) is the drag coefficient, \\( A \\) is the cross-sectional area, and \\( \\rho \\) is the air density. - Variable terrain : Simulate the effect of uneven terrain by introducing a height function for the ground.","title":"5. Limitations and Future Improvements"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deliverables","text":"Python code for simulating projectile motion. Graph showing the range as a function of launch angle for various initial velocities. A discussion of real-world applications and suggestions for improving the model. This project provides a clear understanding of the physics of projectile motion and allows for practical simulation and analysis.","title":"Deliverables:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 The forced damped pendulum provides a fascinating example of nonlinear dynamics, showcasing behaviors such as resonance, chaotic motion, and quasiperiodicity. This is especially important for understanding systems that experience periodic driving forces, damping, and restoring forces. Let's break down the task into clear steps, covering both theoretical foundations and computational analysis. 1. Theoretical Foundation 1.1. Differential Equation of the Forced Damped Pendulum The motion of a forced damped pendulum is described by the second-order differential equation: $$ \\frac{d^2 \\theta}{dt^2} + 2\\zeta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) $$ Where: - \\( \\theta(t) \\) is the angular displacement of the pendulum. - \\( \\zeta \\) is the damping coefficient. - \\( \\omega_0 \\) is the natural frequency of the undamped system. - \\( A \\) is the amplitude of the external driving force. - \\( \\omega \\) is the frequency of the external driving force. For small angles, \\( \\sin(\\theta) \\approx \\theta \\) , and the equation simplifies to: $$ \\frac{d^2 \\theta}{dt^2} + 2\\zeta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) $$ This is a second-order linear differential equation describing damped harmonic motion with an external periodic driving force. The parameters \\( \\zeta \\) , \\( \\omega_0 \\) , and \\( \\omega \\) significantly influence the system's behavior. 1.2. Small-Angle Approximation and Solutions For small angles, we approximate the pendulum's motion as a linear oscillator. The solution to this differential equation can be found using standard methods for forced damped oscillators. For example, the general solution for the displacement \\( \\theta(t) \\) is: $$ \\theta(t) = \\theta_{\\text{steady}} + \\theta_{\\text{transient}} $$ Where: - \\( \\theta_{\\text{steady}} \\) is the steady-state solution, which is the solution to the forced term. - \\( \\theta_{\\text{transient}} \\) decays over time due to damping. The steady-state solution is given by: $$ \\theta_{\\text{steady}} = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (2\\zeta \\omega)^2}} \\cos(\\omega t - \\delta) $$ Where \\( \\delta \\) is the phase shift and depends on \\( \\omega \\) , \\( \\omega_0 \\) , and \\( \\zeta \\) . 1.3. Resonance Conditions Resonance occurs when the driving frequency \\( \\omega \\) is equal to the natural frequency of the pendulum \\( \\omega_0 \\) . At resonance, the amplitude of oscillation can grow without bound, leading to large oscillations. This phenomenon happens when the damping is small enough to allow for energy accumulation from the driving force. 2. Analysis of Dynamics 2.1. Effect of Damping, Amplitude, and Frequency The behavior of the pendulum depends on the values of the damping coefficient \\( \\zeta \\) , the amplitude of the driving force \\( A \\) , and the driving frequency \\( \\omega \\) : - Damping : If the damping coefficient \\( \\zeta \\) is small, the pendulum will oscillate for a long time. As \\( \\zeta \\) increases, the oscillations decay more quickly. - Driving Amplitude : A larger driving amplitude \\( A \\) leads to larger oscillations at resonance. - Driving Frequency : The frequency \\( \\omega \\) determines whether the system is in resonance. When \\( \\omega \\) matches \\( \\omega_0 \\) , resonance occurs, leading to large oscillations. For \\( \\omega \\) far from \\( \\omega_0 \\) , the system oscillates with smaller amplitudes. 2.2. Transition to Chaos When the driving frequency or amplitude exceeds certain thresholds, the system may exhibit chaotic behavior. This can be analyzed by plotting phase portraits, Poincar\u00e9 sections, and bifurcation diagrams to visualize the transition from periodic to chaotic motion. 3. Practical Applications The forced damped pendulum model applies to a variety of real-world systems: - Energy Harvesting : The concept of resonance can be exploited in energy harvesting devices, where the system is tuned to vibrate at the frequency of an external periodic force (e.g., wind or human motion). - Vibration Isolation : Suspension systems in vehicles or buildings are designed to avoid resonant frequencies that could amplify oscillations. - Oscillating Circuits : In electrical circuits, driven RLC circuits behave similarly to forced damped pendulums, with resonance leading to high currents and potential damage. 4. Implementation We will now implement a computational model to simulate the forced damped pendulum's motion, explore its behavior under various conditions, and visualize the results. 4.1. Python Code Implementation We'll use the Runge-Kutta method to solve the differential equation numerically. Here's an implementation using Python: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters omega_0 = 2.0 # Natural frequency (rad/s) zeta = 0.1 # Damping coefficient A = 1.0 # Driving amplitude omega = 2.0 # Driving frequency theta_0 = 0.1 # Initial angle (rad) theta_dot_0 = 0 # Initial angular velocity (rad/s) # Differential equation for the forced damped pendulum def damped_pendulum(t, y): theta, theta_dot = y dtheta_dt = theta_dot dtheta_dot_dt = -2 * zeta * omega_0 * theta_dot - omega_0**2 * theta + A * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Time array t_span = (0, 100) # Time span for simulation t_eval = np.linspace(t_span[0], t_span[1], 10000) # Initial conditions: [theta_0, theta_dot_0] y0 = [theta_0, theta_dot_0] # Solve the differential equation sol = solve_ivp(damped_pendulum, t_span, y0, t_eval=t_eval) # Plot the angular displacement vs time plt.figure(figsize=(10, 6)) plt.plot(sol.t, sol.y[0], label='Theta(t)', color='b') plt.title('Forced Damped Pendulum - Angular Displacement vs Time') plt.xlabel('Time (s)') plt.ylabel('Angular Displacement (rad)') plt.grid(True) plt.legend() plt.show() # Phase plot (theta vs theta_dot) plt.figure(figsize=(10, 6)) plt.plot(sol.y[0], sol.y[1], label='Phase plot', color='r') plt.title('Phase Portrait of Forced Damped Pendulum') plt.xlabel('Theta (rad)') plt.ylabel('Theta dot (rad/s)') plt.grid(True) plt.legend() plt.show() 4.2. Explanation of the Code The damped_pendulum function defines the system of differential equations for the forced damped pendulum. The solve_ivp function from scipy.integrate is used to numerically solve the system. The results are plotted as: Angular displacement vs time to observe the time evolution of the pendulum. Phase portrait (theta vs. theta-dot) to explore the motion's dynamics. 4.3. Additional Visualizations You can generate Poincar\u00e9 sections , bifurcation diagrams , and phase portraits by modifying the code and examining the system's behavior for different values of \\( \\zeta \\) , \\( A \\) , and \\( \\omega \\) . 5. Limitations and Extensions Nonlinear Damping : A more realistic model could include nonlinear damping, where the damping force depends on the velocity in a nonlinear way (e.g., \\( F_{\\text{damp}} = -b \\cdot v^n \\) ). Non-periodic Forcing : Introducing non-periodic forces, such as random noise or impulses, would further diversify the system's behavior and could simulate real-world environments better. Higher-Dimensional Systems : Coupling the pendulum with other systems or adding more degrees of freedom could lead to even more complex behaviors (e.g., multiple pendulums, nonlinear coupled oscillators). Deliverables: Python script simulating the forced damped pendulum. Plots of the pendulum\u2019s motion and phase diagrams for different parameters. Discussion of resonance, chaotic behavior, and applications of the model in engineering. This investigation gives you a deep understanding of forced damped oscillations and provides a platform for exploring complex dynamics in physical systems.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"The forced damped pendulum provides a fascinating example of nonlinear dynamics, showcasing behaviors such as resonance, chaotic motion, and quasiperiodicity. This is especially important for understanding systems that experience periodic driving forces, damping, and restoring forces. Let's break down the task into clear steps, covering both theoretical foundations and computational analysis.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-differential-equation-of-the-forced-damped-pendulum","text":"The motion of a forced damped pendulum is described by the second-order differential equation: $$ \\frac{d^2 \\theta}{dt^2} + 2\\zeta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) $$ Where: - \\( \\theta(t) \\) is the angular displacement of the pendulum. - \\( \\zeta \\) is the damping coefficient. - \\( \\omega_0 \\) is the natural frequency of the undamped system. - \\( A \\) is the amplitude of the external driving force. - \\( \\omega \\) is the frequency of the external driving force. For small angles, \\( \\sin(\\theta) \\approx \\theta \\) , and the equation simplifies to: $$ \\frac{d^2 \\theta}{dt^2} + 2\\zeta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) $$ This is a second-order linear differential equation describing damped harmonic motion with an external periodic driving force. The parameters \\( \\zeta \\) , \\( \\omega_0 \\) , and \\( \\omega \\) significantly influence the system's behavior.","title":"1.1. Differential Equation of the Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-small-angle-approximation-and-solutions","text":"For small angles, we approximate the pendulum's motion as a linear oscillator. The solution to this differential equation can be found using standard methods for forced damped oscillators. For example, the general solution for the displacement \\( \\theta(t) \\) is: $$ \\theta(t) = \\theta_{\\text{steady}} + \\theta_{\\text{transient}} $$ Where: - \\( \\theta_{\\text{steady}} \\) is the steady-state solution, which is the solution to the forced term. - \\( \\theta_{\\text{transient}} \\) decays over time due to damping. The steady-state solution is given by: $$ \\theta_{\\text{steady}} = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (2\\zeta \\omega)^2}} \\cos(\\omega t - \\delta) $$ Where \\( \\delta \\) is the phase shift and depends on \\( \\omega \\) , \\( \\omega_0 \\) , and \\( \\zeta \\) .","title":"1.2. Small-Angle Approximation and Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#13-resonance-conditions","text":"Resonance occurs when the driving frequency \\( \\omega \\) is equal to the natural frequency of the pendulum \\( \\omega_0 \\) . At resonance, the amplitude of oscillation can grow without bound, leading to large oscillations. This phenomenon happens when the damping is small enough to allow for energy accumulation from the driving force.","title":"1.3. Resonance Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-effect-of-damping-amplitude-and-frequency","text":"The behavior of the pendulum depends on the values of the damping coefficient \\( \\zeta \\) , the amplitude of the driving force \\( A \\) , and the driving frequency \\( \\omega \\) : - Damping : If the damping coefficient \\( \\zeta \\) is small, the pendulum will oscillate for a long time. As \\( \\zeta \\) increases, the oscillations decay more quickly. - Driving Amplitude : A larger driving amplitude \\( A \\) leads to larger oscillations at resonance. - Driving Frequency : The frequency \\( \\omega \\) determines whether the system is in resonance. When \\( \\omega \\) matches \\( \\omega_0 \\) , resonance occurs, leading to large oscillations. For \\( \\omega \\) far from \\( \\omega_0 \\) , the system oscillates with smaller amplitudes.","title":"2.1. Effect of Damping, Amplitude, and Frequency"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-transition-to-chaos","text":"When the driving frequency or amplitude exceeds certain thresholds, the system may exhibit chaotic behavior. This can be analyzed by plotting phase portraits, Poincar\u00e9 sections, and bifurcation diagrams to visualize the transition from periodic to chaotic motion.","title":"2.2. Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum model applies to a variety of real-world systems: - Energy Harvesting : The concept of resonance can be exploited in energy harvesting devices, where the system is tuned to vibrate at the frequency of an external periodic force (e.g., wind or human motion). - Vibration Isolation : Suspension systems in vehicles or buildings are designed to avoid resonant frequencies that could amplify oscillations. - Oscillating Circuits : In electrical circuits, driven RLC circuits behave similarly to forced damped pendulums, with resonance leading to high currents and potential damage.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"We will now implement a computational model to simulate the forced damped pendulum's motion, explore its behavior under various conditions, and visualize the results.","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#41-python-code-implementation","text":"We'll use the Runge-Kutta method to solve the differential equation numerically. Here's an implementation using Python: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters omega_0 = 2.0 # Natural frequency (rad/s) zeta = 0.1 # Damping coefficient A = 1.0 # Driving amplitude omega = 2.0 # Driving frequency theta_0 = 0.1 # Initial angle (rad) theta_dot_0 = 0 # Initial angular velocity (rad/s) # Differential equation for the forced damped pendulum def damped_pendulum(t, y): theta, theta_dot = y dtheta_dt = theta_dot dtheta_dot_dt = -2 * zeta * omega_0 * theta_dot - omega_0**2 * theta + A * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Time array t_span = (0, 100) # Time span for simulation t_eval = np.linspace(t_span[0], t_span[1], 10000) # Initial conditions: [theta_0, theta_dot_0] y0 = [theta_0, theta_dot_0] # Solve the differential equation sol = solve_ivp(damped_pendulum, t_span, y0, t_eval=t_eval) # Plot the angular displacement vs time plt.figure(figsize=(10, 6)) plt.plot(sol.t, sol.y[0], label='Theta(t)', color='b') plt.title('Forced Damped Pendulum - Angular Displacement vs Time') plt.xlabel('Time (s)') plt.ylabel('Angular Displacement (rad)') plt.grid(True) plt.legend() plt.show() # Phase plot (theta vs theta_dot) plt.figure(figsize=(10, 6)) plt.plot(sol.y[0], sol.y[1], label='Phase plot', color='r') plt.title('Phase Portrait of Forced Damped Pendulum') plt.xlabel('Theta (rad)') plt.ylabel('Theta dot (rad/s)') plt.grid(True) plt.legend() plt.show()","title":"4.1. Python Code Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#42-explanation-of-the-code","text":"The damped_pendulum function defines the system of differential equations for the forced damped pendulum. The solve_ivp function from scipy.integrate is used to numerically solve the system. The results are plotted as: Angular displacement vs time to observe the time evolution of the pendulum. Phase portrait (theta vs. theta-dot) to explore the motion's dynamics.","title":"4.2. Explanation of the Code"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#43-additional-visualizations","text":"You can generate Poincar\u00e9 sections , bifurcation diagrams , and phase portraits by modifying the code and examining the system's behavior for different values of \\( \\zeta \\) , \\( A \\) , and \\( \\omega \\) .","title":"4.3. Additional Visualizations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-limitations-and-extensions","text":"Nonlinear Damping : A more realistic model could include nonlinear damping, where the damping force depends on the velocity in a nonlinear way (e.g., \\( F_{\\text{damp}} = -b \\cdot v^n \\) ). Non-periodic Forcing : Introducing non-periodic forces, such as random noise or impulses, would further diversify the system's behavior and could simulate real-world environments better. Higher-Dimensional Systems : Coupling the pendulum with other systems or adding more degrees of freedom could lead to even more complex behaviors (e.g., multiple pendulums, nonlinear coupled oscillators).","title":"5. Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#deliverables","text":"Python script simulating the forced damped pendulum. Plots of the pendulum\u2019s motion and phase diagrams for different parameters. Discussion of resonance, chaotic behavior, and applications of the model in engineering. This investigation gives you a deep understanding of forced damped oscillations and provides a platform for exploring complex dynamics in physical systems.","title":"Deliverables:"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}